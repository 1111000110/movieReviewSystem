syntax = "v1"

info (
	title:   "用户模块"
	desc:    "用户模块"
	author:  "张璇"
	email:   "xatuzx2025@163.com"
	version: "1.0"
)

type ( // 登录
	UserLoginReq {
		Phone    string `json:"phone"`
		UserId   int64  `json:"userId"`
		Password string `json:"password"`
	}
	UserLoginResp {
		Token string `json:"token"`
	}
)

type ( // 注册
	UserRegisterReq {
		Phone    string `json:"phone"`
		Password string `json:"password"`
		Role     string `json:"role"`
	}
	UserRegisterResp {
		UserId int64 `json:"userId"`
	}
)

@server (
	group:      user // 登录
	prefix:     /v1 // v1 版本
	timeout:    3s // 超时时间
	maxBytes:   1048576 // 最大结构体
	middleware: Middleware // 中间件
)
service user {
	@handler userLogin
	post /user/login (UserLoginReq) returns (UserLoginResp)

	@handler userRegister
	post /user/register (UserRegisterReq) returns (UserRegisterResp)
}

type ( // 删除
	UserDeleteReq {
		Phone    string `json:"phone"` // 根据手机号删除用户
		UserId   int64  `json:"userId"`
		Password string `json:"password"`
	}
	UserDeleteResp  {
		UserId int64 `json:"userId"`
	}
)

type ( // 修改
	UserUpdateReq {
		UserId    int64  `json:"userID"`
		Phone     string `json:"phone"`
		Email     string `json:"email"`
		Password  string `json:"password"`
		NickName  string `json:"nickName"`
		Avatar    string `json:"avatar"`
		Gender    string `json:"gender"`
		BirthDate int64  `json:"birthDate"`
		Role      string `json:"role"`
		Status    int64  `json:"status"`
	}
	UserUpdateResp  {
		UserId int64 `json:"userId"`
	}
)

type ( // 查询
	UserQueryReq {
		UserId int64 `form:"userId"`
	}
	UserQueryResp {
		UserId    int64  `json:"userId"`
		Phone     string `json:"phone"`
		Email     string `json:"email"`
		Password  string `json:"password"`
		NickName  string `json:"nickName"`
		Avatar    string `json:"avatar"`
		Gender    string `json:"gender"`
		BirthDate int64  `json:"birthDate"`
		Role      string `json:"role"`
		Status    int64  `json:"status"`
	}
)

@server (
	group:      user // 统一管理用户相关 API
	prefix:     /v1 // v1 版本
	timeout:    3s // 超时时间
	maxBytes:   1048576 // 最大结构体
	middleware: Middleware // 中间件
	jwt:        Auth // JWT 认证
)
service user {
	@handler userDelete
	delete /user/delete (UserDeleteReq) returns (UserDeleteResp)

	@handler userUpdate
	put /user/update (UserUpdateReq) returns (UserUpdateResp)

	@handler userQuery
	get /user/query (UserQueryReq) returns (UserQueryResp)
}

