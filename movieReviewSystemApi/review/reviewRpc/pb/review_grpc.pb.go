// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: review.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReviewService_ReviewCreate_FullMethodName      = "/review.ReviewService/ReviewCreate"
	ReviewService_ReviewDelete_FullMethodName      = "/review.ReviewService/ReviewDelete"
	ReviewService_ReviewGetByBaseId_FullMethodName = "/review.ReviewService/ReviewGetByBaseId"
	ReviewService_ReviewGetByRootId_FullMethodName = "/review.ReviewService/ReviewGetByRootId"
)

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewServiceClient interface {
	ReviewCreate(ctx context.Context, in *ReviewCreateReq, opts ...grpc.CallOption) (*ReviewCreateResp, error)
	ReviewDelete(ctx context.Context, in *ReviewDeleteReq, opts ...grpc.CallOption) (*ReviewCreateResp, error)
	ReviewGetByBaseId(ctx context.Context, in *ReviewGetByBaseIdReq, opts ...grpc.CallOption) (*ReviewGetResp, error)
	ReviewGetByRootId(ctx context.Context, in *ReviewGetByRootIdReq, opts ...grpc.CallOption) (*ReviewGetResp, error)
}

type reviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiceClient(cc grpc.ClientConnInterface) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) ReviewCreate(ctx context.Context, in *ReviewCreateReq, opts ...grpc.CallOption) (*ReviewCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewCreateResp)
	err := c.cc.Invoke(ctx, ReviewService_ReviewCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) ReviewDelete(ctx context.Context, in *ReviewDeleteReq, opts ...grpc.CallOption) (*ReviewCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewCreateResp)
	err := c.cc.Invoke(ctx, ReviewService_ReviewDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) ReviewGetByBaseId(ctx context.Context, in *ReviewGetByBaseIdReq, opts ...grpc.CallOption) (*ReviewGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewGetResp)
	err := c.cc.Invoke(ctx, ReviewService_ReviewGetByBaseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) ReviewGetByRootId(ctx context.Context, in *ReviewGetByRootIdReq, opts ...grpc.CallOption) (*ReviewGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewGetResp)
	err := c.cc.Invoke(ctx, ReviewService_ReviewGetByRootId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServiceServer is the server API for ReviewService service.
// All implementations must embed UnimplementedReviewServiceServer
// for forward compatibility.
type ReviewServiceServer interface {
	ReviewCreate(context.Context, *ReviewCreateReq) (*ReviewCreateResp, error)
	ReviewDelete(context.Context, *ReviewDeleteReq) (*ReviewCreateResp, error)
	ReviewGetByBaseId(context.Context, *ReviewGetByBaseIdReq) (*ReviewGetResp, error)
	ReviewGetByRootId(context.Context, *ReviewGetByRootIdReq) (*ReviewGetResp, error)
	mustEmbedUnimplementedReviewServiceServer()
}

// UnimplementedReviewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReviewServiceServer struct{}

func (UnimplementedReviewServiceServer) ReviewCreate(context.Context, *ReviewCreateReq) (*ReviewCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewCreate not implemented")
}
func (UnimplementedReviewServiceServer) ReviewDelete(context.Context, *ReviewDeleteReq) (*ReviewCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewDelete not implemented")
}
func (UnimplementedReviewServiceServer) ReviewGetByBaseId(context.Context, *ReviewGetByBaseIdReq) (*ReviewGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewGetByBaseId not implemented")
}
func (UnimplementedReviewServiceServer) ReviewGetByRootId(context.Context, *ReviewGetByRootIdReq) (*ReviewGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewGetByRootId not implemented")
}
func (UnimplementedReviewServiceServer) mustEmbedUnimplementedReviewServiceServer() {}
func (UnimplementedReviewServiceServer) testEmbeddedByValue()                       {}

// UnsafeReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServiceServer will
// result in compilation errors.
type UnsafeReviewServiceServer interface {
	mustEmbedUnimplementedReviewServiceServer()
}

func RegisterReviewServiceServer(s grpc.ServiceRegistrar, srv ReviewServiceServer) {
	// If the following call pancis, it indicates UnimplementedReviewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReviewService_ServiceDesc, srv)
}

func _ReviewService_ReviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).ReviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_ReviewCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).ReviewCreate(ctx, req.(*ReviewCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_ReviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).ReviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_ReviewDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).ReviewDelete(ctx, req.(*ReviewDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_ReviewGetByBaseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewGetByBaseIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).ReviewGetByBaseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_ReviewGetByBaseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).ReviewGetByBaseId(ctx, req.(*ReviewGetByBaseIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_ReviewGetByRootId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewGetByRootIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).ReviewGetByRootId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_ReviewGetByRootId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).ReviewGetByRootId(ctx, req.(*ReviewGetByRootIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewService_ServiceDesc is the grpc.ServiceDesc for ReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "review.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReviewCreate",
			Handler:    _ReviewService_ReviewCreate_Handler,
		},
		{
			MethodName: "ReviewDelete",
			Handler:    _ReviewService_ReviewDelete_Handler,
		},
		{
			MethodName: "ReviewGetByBaseId",
			Handler:    _ReviewService_ReviewGetByBaseId_Handler,
		},
		{
			MethodName: "ReviewGetByRootId",
			Handler:    _ReviewService_ReviewGetByRootId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review.proto",
}
