// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	thumbUpFieldNames          = builder.RawFieldNames(&ThumbUp{})
	thumbUpRows                = strings.Join(thumbUpFieldNames, ",")
	thumbUpRowsExpectAutoSet   = strings.Join(stringx.Remove(thumbUpFieldNames, "`thumb_up_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	thumbUpRowsWithPlaceHolder = strings.Join(stringx.Remove(thumbUpFieldNames, "`thumb_up_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	thumbUpModel interface {
		Insert(ctx context.Context, data *ThumbUp) (sql.Result, error)
		FindOne(ctx context.Context, thumbUpId int64) (*ThumbUp, error)
		Update(ctx context.Context, data *ThumbUp) error
		Delete(ctx context.Context, thumbUpId int64) error
	}

	defaultThumbUpModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ThumbUp struct {
		ThumbUpId int64 `db:"thumb_up_id"`
		UserId    int64 `db:"user_id"`
		BaseId    int64 `db:"base_id"`
		Val       int64 `db:"val"`
		CreateAt  int64 `db:"create_at"`
		UpdateAt  int64 `db:"update_at"`
	}
)

func newThumbUpModel(conn sqlx.SqlConn) *defaultThumbUpModel {
	return &defaultThumbUpModel{
		conn:  conn,
		table: "`thumbUp`",
	}
}

func (m *defaultThumbUpModel) Delete(ctx context.Context, thumbUpId int64) error {
	query := fmt.Sprintf("delete from %s where `thumb_up_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, thumbUpId)
	return err
}

func (m *defaultThumbUpModel) FindOne(ctx context.Context, thumbUpId int64) (*ThumbUp, error) {
	query := fmt.Sprintf("select %s from %s where `thumb_up_id` = ? limit 1", thumbUpRows, m.table)
	var resp ThumbUp
	err := m.conn.QueryRowCtx(ctx, &resp, query, thumbUpId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultThumbUpModel) Insert(ctx context.Context, data *ThumbUp) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, thumbUpRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.BaseId, data.Val)
	return ret, err
}

func (m *defaultThumbUpModel) Update(ctx context.Context, data *ThumbUp) error {
	query := fmt.Sprintf("update %s set %s where `thumb_up_id` = ?", m.table, thumbUpRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.BaseId, data.Val, data.ThumbUpId)
	return err
}

func (m *defaultThumbUpModel) tableName() string {
	return m.table
}
