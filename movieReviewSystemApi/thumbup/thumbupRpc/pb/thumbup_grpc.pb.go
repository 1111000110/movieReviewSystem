// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: thumbup.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThumbUpService_ThumbUpGetByBaseId_FullMethodName    = "/thumbUp.ThumbUpService/ThumbUpGetByBaseId"
	ThumbUpService_ThumbUpGetByUserId_FullMethodName    = "/thumbUp.ThumbUpService/ThumbUpGetByUserId"
	ThumbUpService_ThumbUpGetByThumbUpId_FullMethodName = "/thumbUp.ThumbUpService/ThumbUpGetByThumbUpId"
	ThumbUpService_ThumpUpCreate_FullMethodName         = "/thumbUp.ThumbUpService/ThumpUpCreate"
)

// ThumbUpServiceClient is the client API for ThumbUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThumbUpServiceClient interface {
	ThumbUpGetByBaseId(ctx context.Context, in *ThumbUpGetByBaseIdReq, opts ...grpc.CallOption) (*ThumbUpGetResp, error)
	ThumbUpGetByUserId(ctx context.Context, in *ThumbUpGetByUserIdReq, opts ...grpc.CallOption) (*ThumbUpGetResp, error)
	ThumbUpGetByThumbUpId(ctx context.Context, in *ThumbUpGetByThumbUpIdReq, opts ...grpc.CallOption) (*ThumbUpGetResp, error)
	ThumpUpCreate(ctx context.Context, in *ThumbUpCreateReq, opts ...grpc.CallOption) (*ThumbUpCreateResp, error)
}

type thumbUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThumbUpServiceClient(cc grpc.ClientConnInterface) ThumbUpServiceClient {
	return &thumbUpServiceClient{cc}
}

func (c *thumbUpServiceClient) ThumbUpGetByBaseId(ctx context.Context, in *ThumbUpGetByBaseIdReq, opts ...grpc.CallOption) (*ThumbUpGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThumbUpGetResp)
	err := c.cc.Invoke(ctx, ThumbUpService_ThumbUpGetByBaseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbUpServiceClient) ThumbUpGetByUserId(ctx context.Context, in *ThumbUpGetByUserIdReq, opts ...grpc.CallOption) (*ThumbUpGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThumbUpGetResp)
	err := c.cc.Invoke(ctx, ThumbUpService_ThumbUpGetByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbUpServiceClient) ThumbUpGetByThumbUpId(ctx context.Context, in *ThumbUpGetByThumbUpIdReq, opts ...grpc.CallOption) (*ThumbUpGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThumbUpGetResp)
	err := c.cc.Invoke(ctx, ThumbUpService_ThumbUpGetByThumbUpId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thumbUpServiceClient) ThumpUpCreate(ctx context.Context, in *ThumbUpCreateReq, opts ...grpc.CallOption) (*ThumbUpCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThumbUpCreateResp)
	err := c.cc.Invoke(ctx, ThumbUpService_ThumpUpCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThumbUpServiceServer is the server API for ThumbUpService service.
// All implementations must embed UnimplementedThumbUpServiceServer
// for forward compatibility.
type ThumbUpServiceServer interface {
	ThumbUpGetByBaseId(context.Context, *ThumbUpGetByBaseIdReq) (*ThumbUpGetResp, error)
	ThumbUpGetByUserId(context.Context, *ThumbUpGetByUserIdReq) (*ThumbUpGetResp, error)
	ThumbUpGetByThumbUpId(context.Context, *ThumbUpGetByThumbUpIdReq) (*ThumbUpGetResp, error)
	ThumpUpCreate(context.Context, *ThumbUpCreateReq) (*ThumbUpCreateResp, error)
	mustEmbedUnimplementedThumbUpServiceServer()
}

// UnimplementedThumbUpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThumbUpServiceServer struct{}

func (UnimplementedThumbUpServiceServer) ThumbUpGetByBaseId(context.Context, *ThumbUpGetByBaseIdReq) (*ThumbUpGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThumbUpGetByBaseId not implemented")
}
func (UnimplementedThumbUpServiceServer) ThumbUpGetByUserId(context.Context, *ThumbUpGetByUserIdReq) (*ThumbUpGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThumbUpGetByUserId not implemented")
}
func (UnimplementedThumbUpServiceServer) ThumbUpGetByThumbUpId(context.Context, *ThumbUpGetByThumbUpIdReq) (*ThumbUpGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThumbUpGetByThumbUpId not implemented")
}
func (UnimplementedThumbUpServiceServer) ThumpUpCreate(context.Context, *ThumbUpCreateReq) (*ThumbUpCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThumpUpCreate not implemented")
}
func (UnimplementedThumbUpServiceServer) mustEmbedUnimplementedThumbUpServiceServer() {}
func (UnimplementedThumbUpServiceServer) testEmbeddedByValue()                        {}

// UnsafeThumbUpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThumbUpServiceServer will
// result in compilation errors.
type UnsafeThumbUpServiceServer interface {
	mustEmbedUnimplementedThumbUpServiceServer()
}

func RegisterThumbUpServiceServer(s grpc.ServiceRegistrar, srv ThumbUpServiceServer) {
	// If the following call pancis, it indicates UnimplementedThumbUpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThumbUpService_ServiceDesc, srv)
}

func _ThumbUpService_ThumbUpGetByBaseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbUpGetByBaseIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbUpServiceServer).ThumbUpGetByBaseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThumbUpService_ThumbUpGetByBaseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbUpServiceServer).ThumbUpGetByBaseId(ctx, req.(*ThumbUpGetByBaseIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbUpService_ThumbUpGetByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbUpGetByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbUpServiceServer).ThumbUpGetByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThumbUpService_ThumbUpGetByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbUpServiceServer).ThumbUpGetByUserId(ctx, req.(*ThumbUpGetByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbUpService_ThumbUpGetByThumbUpId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbUpGetByThumbUpIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbUpServiceServer).ThumbUpGetByThumbUpId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThumbUpService_ThumbUpGetByThumbUpId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbUpServiceServer).ThumbUpGetByThumbUpId(ctx, req.(*ThumbUpGetByThumbUpIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThumbUpService_ThumpUpCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbUpCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThumbUpServiceServer).ThumpUpCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThumbUpService_ThumpUpCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThumbUpServiceServer).ThumpUpCreate(ctx, req.(*ThumbUpCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ThumbUpService_ServiceDesc is the grpc.ServiceDesc for ThumbUpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThumbUpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thumbUp.ThumbUpService",
	HandlerType: (*ThumbUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ThumbUpGetByBaseId",
			Handler:    _ThumbUpService_ThumbUpGetByBaseId_Handler,
		},
		{
			MethodName: "ThumbUpGetByUserId",
			Handler:    _ThumbUpService_ThumbUpGetByUserId_Handler,
		},
		{
			MethodName: "ThumbUpGetByThumbUpId",
			Handler:    _ThumbUpService_ThumbUpGetByThumbUpId_Handler,
		},
		{
			MethodName: "ThumpUpCreate",
			Handler:    _ThumbUpService_ThumpUpCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thumbup.proto",
}
